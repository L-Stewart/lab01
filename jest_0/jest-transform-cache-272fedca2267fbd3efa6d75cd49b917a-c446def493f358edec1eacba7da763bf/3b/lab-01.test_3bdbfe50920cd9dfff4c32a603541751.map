{"version":3,"sources":["lab-01.test.js"],"names":["greet","require","math","faker","describe","test","add","addNull","subtract","subtractNull","expect","toEqual","returnValue","sayHi","testNull","testNumStr"],"mappings":"AAAA,a,CAEA;AACA;;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,iBAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,gBAAD,CAApB,C,CAEA;;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEAG,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9B;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEFC,EAAAA,IAAI,CAAC,6DAAD,EAAgE,MAAM;AACxE;AACA;AACA,UAAMC,GAAG,GAAGJ,IAAI,CAACI,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAZ;AACA,UAAMC,OAAO,GAAGL,IAAI,CAACI,GAAL,CAAS,CAAT,EAAY,GAAZ,CAAhB;AACA,UAAME,QAAQ,GAAGN,IAAI,CAACM,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAjB;AACA,UAAMC,YAAY,GAAGP,IAAI,CAACM,QAAL,CAAc,CAAd,EAAiB,GAAjB,CAArB,CANwE,CAQxE;;AACAE,IAAAA,MAAM,CAACJ,GAAD,CAAN,CAAYK,OAAZ,CAAoB,CAApB;AACAD,IAAAA,MAAM,CAACH,OAAD,CAAN,CAAgBI,OAAhB,CAAwB,IAAxB;AACAD,IAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,OAAjB,CAAyB,CAAC,CAA1B;AACAD,IAAAA,MAAM,CAACD,YAAD,CAAN,CAAqBE,OAArB,CAA6B,IAA7B;AAED,GAdG,CAAJ;AAgBAN,EAAAA,IAAI,CAAC,2FAAD,EAA8F,MAAM;AACtG;AACA;AACA,UAAMO,WAAW,GAAGZ,KAAK,CAACa,KAAN,CAAY,OAAZ,CAApB;AACA,UAAMC,QAAQ,GAAGd,KAAK,CAACa,KAAN,CAAY,GAAZ,CAAjB;AACA,UAAME,UAAU,GAAGf,KAAK,CAACa,KAAN,CAAY,KAAZ,CAAnB,CALsG,CAOtG;;AAEAH,IAAAA,MAAM,CAACE,WAAD,CAAN,CAAoBD,OAApB,CAA4B,cAA5B;AACAD,IAAAA,MAAM,CAACI,QAAD,CAAN,CAAiBH,OAAjB,CAAyB,IAAzB;AACAD,IAAAA,MAAM,CAACK,UAAD,CAAN,CAAmBJ,OAAnB,CAA2B,YAA3B;AACD,GAZG,CAAJ;AAaD,CAhEO,CAAR","sourcesContent":["'use strict';\n\n//Lorin - Test module files.\n// const arithmetic = require('../lib/arithmetic.js');\nconst greet = require('../lib/greet.js');\nconst math = require('../lib/math.js');\n\n//Lorin - load npm packages.\nconst faker = require('faker');\n\ndescribe('#demo.test.js', () => {\n  //  Lorin- demo code from Vinicio\n    // // Vinicio - here, we'll write all our tests\n    // test('These are the basics of TDD', () =>{\n    //   // ARRANGE\n    //   const aNumber = 5;\n    //   const aNullValue = null;\n    //   const fifty = 50;\n    //\n    //   // ACT\n    //   // Vinicio - no act, because we are just showing basics\n    //\n    //   // ASSERT\n    //   expect(aNumber).toEqual(5);\n    //   expect(fifty).toBeLessThan(100);\n    //   expect(fifty).toBeGreaterThan(10);\n    //   expect(aNullValue).toBeNull();\n    //   const firstArgument = faker.random.number();\n    //   const secondArgument = faker.random.number();\n    //   // expect(myModule.myFunction(firstArgument, secondArgument).toEqual(firstArgument + secondArgument));\n    // });\n    //\n    // test('Showcasing how to add another test ', () => {\n    //   //ARRANGE\n    //   const aTruthyValue = 'hi';\n    //   const aFalsyValue = 0;\n    //\n    //   //ACT :(\n    //\n    //   //ASSERT\n    //   expect(aTruthyValue).toBeTruthy();\n    //   expect(aFalsyValue).toBeFalsy();\n    //   expect(aTruthyValue).not.toBeFalsy();\n    // });\n\n  test('math.add/subtract should complete if the input is aa number', () => {\n    //ARRANGE :(\n    //ACT\n    const add = math.add(1, 2);\n    const addNull = math.add(1, 'd');\n    const subtract = math.subtract(1, 2);\n    const subtractNull = math.subtract(3, 'w');\n\n    //ASSERT\n    expect(add).toEqual(3);\n    expect(addNull).toEqual(null);\n    expect(subtract).toEqual(-1);\n    expect(subtractNull).toEqual(null);\n\n  });\n\n  test('greet.sayHi should say hello if the input type is a string, otherwise it will return null', () => {\n    // ARRANGE :(\n    // ACT\n    const returnValue = greet.sayHi('world');\n    const testNull = greet.sayHi(123);\n    const testNumStr = greet.sayHi('123');\n\n    // ASSERT\n\n    expect(returnValue).toEqual('Hello world.');\n    expect(testNull).toEqual(null);\n    expect(testNumStr).toEqual('Hello 123.');\n  });\n});"]}